package com.badlogic.drop;

import com.badlogic.gdx.ApplicationAdapter;
import com.badlogic.gdx.Gdx;
import com.badlogic.gdx.Input;
import com.badlogic.gdx.audio.Music;
import com.badlogic.gdx.audio.Sound;
import com.badlogic.gdx.graphics.GL20;
import com.badlogic.gdx.graphics.OrthographicCamera;
import com.badlogic.gdx.graphics.Texture;
import com.badlogic.gdx.graphics.g2d.SpriteBatch;
import com.badlogic.gdx.graphics.g3d.particles.values.RectangleSpawnShapeValue;
import com.badlogic.gdx.math.MathUtils;
import com.badlogic.gdx.math.Rectangle;
import com.badlogic.gdx.math.Vector3;
import com.badlogic.gdx.utils.Array;
import com.badlogic.gdx.utils.TimeUtils;

import java.util.Iterator;

public class Drop extends ApplicationAdapter {
    private Texture dropImage;
    private Texture bucketImage;
    private Sound dropSound;
    private Music rainMusic;

    private OrthographicCamera camera;
    private SpriteBatch batch;

    private Rectangle bucket;
    private Array<Rectangle> raindrops;
    private long lastDropTime;


    @Override
    public void create() {
        // load the images for the droplet and the bucket, 64x64 pixels each
        dropImage = new Texture(Gdx.files.internal("droplet.png"));
        bucketImage = new Texture(Gdx.files.internal("bucket.png"));

        // load the drop sound effect and the rain background "music"
        dropSound = Gdx.audio.newSound(Gdx.files.internal("drop.wav"));
        rainMusic = Gdx.audio.newMusic(Gdx.files.internal("rain.mp3"));

        // start the playback of the background music immediately
        rainMusic.setLooping(true);
        rainMusic.play();

        // create the camera and ensure it renders our 800x480 resolution
        camera = new OrthographicCamera();
        camera.setToOrtho(false, 800, 480);


        batch = new SpriteBatch();

        bucket = new Rectangle();// Rectangles let us store the position and size of our Textures
        bucket.width = 64;
        bucket.height = 64;
        bucket.x = 800 / 2 - 64 / 2; // 800/2 moves texture to center; - 64/2 accounts for image width (64px) and centers it in center screen
        bucket.y = 20;

        // create an array to hold the raindrops and insert our first raindrop
        raindrops = new Array<Rectangle>();
        spawnRainDrop();

    }

    @Override
    public void render() {
        Gdx.gl.glClearColor(0, 0, 0.2f, 1);
        Gdx.gl.glClear(GL20.GL_COLOR_BUFFER_BIT);

        camera.update();

        // before we can begin rendering, set up the camera's matrix(the coordinate system is uses to render everything on the screen); the SpriteBatch will render everything inside this matrix from now on. "camera.combined" is the matrix.
        batch.setProjectionMatrix(camera.combined);
        batch.begin();
        batch.draw(bucketImage, bucket.x, bucket.y);
        for (Rectangle raindrop : raindrops) { // for each Rectangle in the Rectangle array...
            batch.draw(dropImage, raindrop.x, raindrop.y);
        }
        batch.end();

        // input for touch/mouse
        if (Gdx.input.isTouched()) {
            Vector3 touchpos = new Vector3();
            touchpos.set(Gdx.input.getX(), Gdx.input.getY(), 0);
            camera.unproject(touchpos);// this converts the touch/mouse screen coordinates (stored in Vector3 touchpos) to world space coordinates
            bucket.x = touchpos.x - 64 / 2;
        }

        // input for keyboard
        if (Gdx.input.isKeyJustPressed(Input.Keys.LEFT))
            bucket.x -= 200 * Gdx.graphics.getDeltaTime();
        if (Gdx.input.isKeyJustPressed(Input.Keys.RIGHT))
            bucket.x += 200 * Gdx.graphics.getDeltaTime();
        // make sure the user can't move out of the screen
        if (bucket.x < 0) bucket.x = 0;
        if (bucket.x > 800 - 64) bucket.x = 800 - 64;

        // spawn a new raindrop if enough time has passed since the last one was dropped
        if (TimeUtils.nanoTime() - lastDropTime > 1000000000) spawnRainDrop();

        Iterator<Rectangle> iter = raindrops.iterator();// call raindrops' iterator to the beginning of the collection(raindrops)
        while (iter.hasNext()) {
            Rectangle raindrop = iter.next();// return the next element in the raindrops array. The name of the element is "raindrop"
            raindrop.y -= 200 * Gdx.graphics.getDeltaTime();// let the element keep descending while there is more elements in the array
            if (raindrop.y + 64 < 0) iter.remove();// remove if raindrop falls off screen
            // if raindrop hits the bucket, play the right sound and remove the raindrop
            if (raindrop.overlaps(bucket)) {
                dropSound.play();
                iter.remove();
            }
        }

    }

    // create a raindrop
    private void spawnRainDrop() {
        Rectangle raindrop = new Rectangle();
        raindrop.x = MathUtils.random(0, 800 - 64);
        raindrop.y = 480;
        raindrop.width = 64;
        raindrop.height = 64;
        //add the raindrop to the raindrops array
        raindrops.add(raindrop);
        // record the time this drop was created
        lastDropTime = TimeUtils.nanoTime();

        // if SPACE key is pressed, pause game
        if (Gdx.input.isKeyJustPressed(Input.Keys.SPACE))
            Gdx.graphics.setContinuousRendering(false);

    }

    // this dispose() method belongs to ApplicationAdapter
    @Override
    public void dispose() {// free my system ram of all of these objects and interfaces(sound, music)
        dropImage.dispose();
        bucketImage.dispose();
        dropSound.dispose();
        rainMusic.dispose();
        batch.dispose();
    }
/*
    public void pause(){
		Gdx.graphics.setContinuousRendering(false);
	}

	public void resume(){
		Gdx.app.getApplicationListener().resume();
	}*/
